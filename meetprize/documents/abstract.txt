Kotlin - webextensions dla odważnych
Kotlin wszedł już na tyle do świadomości świata IT, że nie kojarzy się już tylko z keczupem. Co takiego Kotlin wniósł, że język który został publicznie zaprezentowany w 2011 jest dziś aktywnie wspierany przez Google w systemie Android oraz stał się drugim oficjalnym językiem skryptowym w Gradle? Kotlin zdążył się osiedlić w wielu zastosowania na wielu frontach. Co ciekawe, to Kotlin jak mało który język pozwala używać składni Java. Tak, tak, możemy pisać aplikację kotlinową w Javie.
Ja chciałbym pokazać Kotlin na terenach mało odkrytych, jakim jest pisanie webxtensions dla przeglądarek takich jak Firefox, Opera, Chrome itd. Webextensions czyli rozszerzeniea w przeglądarkach znamy wszyscy i szeroko używamy. Co innego z implementacją - ta może wydawać się wiedzą tajemną. Zwłaszcza że, te pisze się tfu, tfu, w Javascript. Nie jest to aż taka tajemna wiedza, zwłaszcza po niedawnej rewolucji w świecie przeglądarek, kiedy to przyjęto "prawie wspólne" development API, co oznacza, że rozszerzenie napisane na jedną przeglądarkę po niewielkich poprawkach może działać na innych przeglądarkach.
W tytule jest "dla odważnych", bo rozszerzenie wymaga użycia: HTML, CSS, Javascript, a wiadomo, co rasowy Java backendowiec myśli o tym. Trochę jak o starej ciotce, którą sadzamy w fotelu w kącie. Wiemy, że tam jest i to wystarczy, ale niech ciotka nie przeszkadza. Tu Kotlin przyda się, by zmniejszyć ten ból. My piszemy w Kotlinie, a ten zajmie się komunikacją ze starą ciotką. Niestety od HTML nie uciekniemy, ale są możliwości, by ten HTML nie był taki htmlowy. Oczywiście są inne platformy, które pozwalają na konwersję do javascript. Ale dla Kotlina jest to jedną z natur. Wystarczy w IntelliJ wybrać jako docelową platformę Javascript.
Możemy znaleźć w sieci wiele zastosowań Kotlina, ale webextensions w Kotlinie są tematem mało zbadanym, a jeśli już to na poziomie stworzenia webextension dla "Hello World". Stworzenie bardziej złożonej aplikacji staje się już większym wyzwaniem. To mnie też zainteresowało, bo to była okazja na dokonanie własnych odkryć. Jest to też okazja, by zaprezentować konstrukcje które są silną stroną Kotlina, a które nie zawsze łatwo pokazać. Jednym ze smaczków będą coroutines w Kotlinie, które można określić wątkami na sterydach, a które w świecie Java nie istnieją. Często, gdy widzimy prezentację jakiegoś innego języka, na końcu można się zastanawiać - ale właściwie w czym ten język jest lepszy od mojego, czy faktycznie daje tyle, by się go uczyć, równie dobrze mogę to napisać w moim języku.
Co chciałbym pokazać, tak żeby to nie było tylko "Hello World" czy implementacja otwarcia pop-up'a? Pomysł się pojawił, gdy na jednym ze spotkań została zaprezentowana pewna aplikacja do losowania licencji JetBrains, a która nie do końca zadziałała. Nadal stary dobry Excel i random.org. Czemu by nie napisać własnego dedykowanego webextension? Tak więc podczas spotkania stworzymy "prawie" od początku rozszerzenie do losowania nagród na JUG. "Prawie" bo rozszerzenie będzie tworzone na podstawie mini-framework'a, który powstał mi przy okazji. Pominę tworzenie warstwy prezentacyjnej (HTML) od zera, która będzie już gotowa. Skupimy się na tworzeniu logiki biznesowej.
Zaprezentuję też w zarysie propozycje na inne rozszerzenia takie jak: push notificiations o nowym JUG na Meetupie, czy też jak stworzyć mini "AI" do prognozowania ilości osiągalnych story points w aktualnie planowanym Sprincie.
Poza tym będzie trochę o językach programowania jako takich. Co ma wspólnego: Perl, Php i Kotlin. I dlaczego MVP jest lepsze od MVC.

